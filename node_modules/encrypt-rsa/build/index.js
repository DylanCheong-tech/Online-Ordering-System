"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = __importStar(require("crypto"));
var helpers_1 = require("./utils/helpers");
var NodeRSA = /** @class */ (function () {
    /**
     *
     * @param publicKey
     * @param privateKey
     */
    function NodeRSA(publicKey, privateKey, modulusLength) {
        this.publicKey = publicKey;
        this.privateKey = privateKey;
        this.modulusLength = modulusLength || 2048;
        this.keyBase64 = '';
    }
    /**
     *
     * @param {Object} args
     * @param {String} args.publicKey
     * @param {String} args.text the text that you need to encrypt
     *
     * @returns {String}
     */
    NodeRSA.prototype.encryptStringWithRsaPublicKey = function (args) {
        var text = args.text, _a = args.publicKey, publicKey = _a === void 0 ? this.publicKey : _a;
        var publicKeyDecoded = (0, helpers_1.decode)(this.convertKetToBase64(publicKey));
        var buffer = Buffer.from(text);
        var encrypted = crypto === null || crypto === void 0 ? void 0 : crypto.publicEncrypt(publicKeyDecoded, buffer);
        return encrypted.toString('base64');
    };
    /**
     *
     * @param {Object} args
     * @param {String} args.privateKey
     * @param {String} args.text the text that you need to decrypt
     *
     * @returns {String}
     */
    NodeRSA.prototype.decryptStringWithRsaPrivateKey = function (args) {
        var text = args.text, _a = args.privateKey, privateKey = _a === void 0 ? this.privateKey : _a;
        var privateKeyDecoded = (0, helpers_1.decode)(this.convertKetToBase64(privateKey));
        var buffer = Buffer.from(text, 'base64');
        var decrypted = crypto === null || crypto === void 0 ? void 0 : crypto.privateDecrypt(privateKeyDecoded, buffer);
        return decrypted.toString('utf8');
    };
    NodeRSA.prototype.createPrivateAndPublicKeys = function (modulusLength) {
        if (modulusLength === void 0) { modulusLength = this.modulusLength; }
        if (typeof crypto.generateKeyPairSync === 'function') {
            var _a = crypto.generateKeyPairSync('rsa', {
                modulusLength: modulusLength,
                publicKeyEncoding: {
                    type: 'spki',
                    format: 'pem',
                },
                privateKeyEncoding: {
                    type: 'pkcs8',
                    format: 'pem',
                },
            }), privateKey = _a.privateKey, publicKey = _a.publicKey;
            return { privateKey: privateKey, publicKey: publicKey };
        }
        return { privateKey: '', publicKey: '' };
    };
    NodeRSA.prototype.convertKetToBase64 = function (key) {
        return (0, helpers_1.encode)(key.replace(/^ +/gm, '') || this.keyBase64);
    };
    return NodeRSA;
}());
exports.default = NodeRSA;
